{
	"info": {
		"_postman_id": "cb889700-7b12-4928-a2e6-5a76de0847cb",
		"name": "Open source API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Pokemon",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36c3650c-aabf-478c-a142-f27d4ca1f786",
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Validate first pokemon name', function () {\r",
							"    pm.expect(pm.response.text()).to.include('bulbasaur');\r",
							"})\r",
							"\r",
							"pm.test(\"Validate pokemon type\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.types[0].type.name).to.eql(\"grass\");\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a591b4bc-c52c-4e32-9551-3ede867d95df",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "https://pokeapi.co/api/v2/pokemon/1/"
			},
			"response": []
		},
		{
			"name": "Get country list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a3ff088-5b39-474c-967f-34f66500456f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have India\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"India\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test Afghanisthan code to equal AF\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].alpha2Code).to.eql(\"AF\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate capital of India\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[104].capital).to.eql(\"New Delhi\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3e92594c-8c91-4eac-9a7b-d3d0d974e10b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://restcountries.com/v2/all"
			},
			"response": []
		},
		{
			"name": "pm.test Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
						"exec": [
							"// use the `pm.*` API to write your test",
							"// the `pm.test()` method accepts 2 parameters",
							"// the first parameter is the name of your test (be descriptive)",
							"// the second parameter is a function whereby if any assertions within your function fail, then the test will fail",
							"",
							"pm.test(\"Name of the first test\", function () {",
							"    // make an assertion",
							"    // if your assertion throws an error, this test will fail",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Name of the second test\", function () {",
							"    // make as many assertions as you'd like as part of this test",
							"    // if any assertion throws an error, this test will fail",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e15b1ae0-f4c1-4586-9739-61799fda0a57",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "foo1",
							"value": "bar1"
						},
						{
							"key": "foo2",
							"value": "bar2"
						}
					]
				},
				"description": "In the Postman app, review the tests written under the **Tests** tab in the request builder on the top. Send this request, and view the results of the tests under the **Tests** tab in the response viewer on the bottom.\n\n### The `pm.*` API\n\nUse the `pm.*` API to write your test under the **Tests** tab in Postman. The `pm.test()` method accepts 2 parameters. The first parameter is the name of the test, so it's important to give your test a descriptive name to provide more information in case the test fails. The second parameter is a function whereby if any assertions within your function fail, then the test will fail.\n\n```\npm.test(\"Name of the second test\", function () {\n    // make as many assertions as you'd like as part of this test\n    // if any assertion throws an error, this test will fail\n    pm.response.to.have.status(200);\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n```"
			},
			"response": [
				{
					"id": "3b150763-e116-4b99-9607-7d23de9e05fe",
					"name": "Status",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo1",
									"value": "bar1"
								},
								{
									"key": "foo2",
									"value": "bar2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 15 Nov 2018 22:21:20 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Length",
							"value": "348"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"args\": {\n        \"foo1\": \"bar1\",\n        \"foo2\": \"bar2\"\n    },\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"cookie\": \"sails.sid=s%3AK8csWt5VZ3Oalv85HiBtffDcrSOJ-RiP.V14RjjJqkOv8%2BLXuHRmZ9l50G8S6eU16yLU%2F3N%2F0dKU\",\n        \"postman-token\": \"c6b9bca5-7369-4da8-a539-6c906d1133f2\",\n        \"user-agent\": \"PostmanRuntime/7.3.0\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"url\": \"https://postman-echo.com/get?foo1=bar1&foo2=bar2\"\n}"
				}
			]
		}
	]
}